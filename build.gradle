plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}

group 'ekam.template'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://palantir.bintray.com/releases" }
}

dependencies {
    // ekam
    implementation('com.testvagrant.ekam:ekam:0.3.1-beta')
    implementation('com.testvagrant.ekam:ekam-api:0.1.0')
    implementation('com.testvagrant.ekam:ekam-atoms:0.1.0')

    // appium
    implementation('io.appium:java-client:7.5.1')

    //AssertJ
    implementation('org.assertj:assertj-core:3.20.2')

    // selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')

    // google
    implementation('com.google.inject:guice:5.0.1')

    // Test frameworks
    testImplementation('org.testng:testng:7.4.0')
    testImplementation('io.cucumber:cucumber-java:6.11.0')
    testImplementation('io.cucumber:cucumber-testng:6.11.0')

    // square
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.okhttp3:logging-interceptor:4.9.1')

    //lombok
    implementation('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')

    // jdbi
    implementation('org.jdbi:jdbi:2.78')

    // Generic wait
    implementation('org.awaitility:awaitility:4.1.0')
}

tasks.withType(Test) {
    systemProperties = [
            config: System.getProperty("config")
    ]
}

task runWebTests(type: Test) {
    filter {
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.api.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "2"))
        includeGroups System.getProperty("tags", "web")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runMobileTests(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.api.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "1"))
        includeGroups System.getProperty("tags", "mobile")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runApiTests(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "api")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runDbTests(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.api.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "db")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runCucumberWebTests(type: JavaExec) {
    main = "io.cucumber.core.cli.Main"
    List<String> args = this.getArgs()
    args.addAll(["--glue", "com.testvagrant.ekam.example.web.steps"])
    classpath = sourceSets.test.runtimeClasspath
    systemProperties = [
            config: System.getProperty("config", "default"),
            tags  : System.getProperty("tags", "")
    ]
    ignoreExitValue = true
}

task runCucumberMobileTests(type: JavaExec) {
    main = "io.cucumber.core.cli.Main"
    List<String> args = this.getArgs()
    args.addAll(["--glue", "com.testvagrant.ekam.example.mobile.steps"])
    classpath = sourceSets.test.runtimeClasspath
    systemProperties = [
            config: System.getProperty("config", "default"),
            tags  : System.getProperty("tags", "")
    ]
    ignoreExitValue = true
}

def getArgs() {
    List<String> args = ["-p", "pretty",
                         "-p", ("json:${project.buildDir}/cucumber/cucumber-report.json"),
                         "-p", "timeline:${project.buildDir}/cucumber/timeline/",
                         "-t", System.getProperty("tags", ""),
                         "-p", "io.qameta.allure.cucumber6jvm.AllureCucumber6Jvm",
                         "--threads", System.getProperty("sessions", "1")]
    return args
}

allure {
    version = '2.13.2'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.13.2'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    clean = true
}


task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}


clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
        delete "$projectDir/allure-results"
    }
}

// Execution Rules
tasks.runWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runMobileTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runApiTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runCucumberWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runCucumberMobileTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.runWebTests.finalizedBy('allureReport')
tasks.runWebTests.finalizedBy('allureReport')
tasks.runMobileTests.finalizedBy('allureReport')
tasks.runApiTests.finalizedBy('allureReport')
tasks.runCucumberWebTests.finalizedBy('allureReport')
tasks.runCucumberMobileTests.finalizedBy('allureReport')
